# Generated by Django 4.2.23 on 2025-08-24 21:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('character', models.CharField(blank=True, default='', max_length=128)),
                ('order', models.IntegerField(default=999)),
                ('role_type', models.CharField(choices=[('cast', 'Cast'), ('crew', 'Crew')], default='cast', max_length=16)),
                ('job', models.CharField(blank=True, default='', max_length=64)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Embedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_type', models.CharField(choices=[('movie', 'movie'), ('user', 'user'), ('tag', 'tag')], max_length=8)),
                ('object_id', models.IntegerField(db_index=True)),
                ('dim', models.IntegerField()),
                ('vector', models.BinaryField()),
                ('model_version', models.CharField(default='v1', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('impression', 'impression'), ('click', 'click'), ('like', 'like'), ('dismiss', 'dismiss'), ('rate', 'rate')], max_length=12)),
                ('context', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('tmdb_id', models.IntegerField(blank=True, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('type', models.CharField(choices=[('watch', 'Watchlist'), ('seen', 'Seen'), ('custom', 'Custom')], default='custom', max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='ListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['position', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tmdb_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('imdb_id', models.CharField(blank=True, max_length=16, null=True, unique=True)),
                ('title', models.CharField(db_index=True, max_length=256)),
                ('original_title', models.CharField(blank=True, max_length=256, null=True)),
                ('release_year', models.IntegerField(blank=True, db_index=True, null=True)),
                ('overview', models.TextField(blank=True, default='')),
                ('poster_url', models.URLField(blank=True, null=True)),
                ('runtime', models.IntegerField(blank=True, null=True)),
                ('popularity', models.FloatField(default=0.0)),
                ('vote_average', models.FloatField(default=0.0)),
                ('vote_count', models.IntegerField(default=0)),
                ('avg_rating', models.FloatField(db_index=True, default=0.0)),
                ('rating_count', models.IntegerField(default=0)),
                ('slug', models.SlugField(blank=True, max_length=300, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tmdb_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('imdb_id', models.CharField(blank=True, max_length=16, null=True, unique=True)),
                ('profile_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
            ],
        ),
        migrations.CreateModel(
            name='RecommendationCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('items', models.JSONField(blank=True, default=list)),
                ('model_version', models.CharField(default='v1', max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, default='', max_length=120)),
                ('body', models.TextField()),
                ('spoiler', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uniq_tag_lower_name_ci_v1'),
        ),
        migrations.AddField(
            model_name='review',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.movie'),
        ),
        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='recommendationcache',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rec_cache', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rating',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.movie'),
        ),
        migrations.AddField(
            model_name='rating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uniq_provider_lower_name_ci_v1'),
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uniq_person_lower_name_ci_v1'),
        ),
        migrations.AddField(
            model_name='movie',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='movies', to='api.genre'),
        ),
        migrations.AddField(
            model_name='movie',
            name='providers',
            field=models.ManyToManyField(blank=True, related_name='movies', to='api.provider'),
        ),
        migrations.AddField(
            model_name='movie',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='movies', to='api.tag'),
        ),
        migrations.AddField(
            model_name='listitem',
            name='list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.list'),
        ),
        migrations.AddField(
            model_name='listitem',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.movie'),
        ),
        migrations.AddField(
            model_name='list',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lists', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='genre',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uniq_genre_lower_name_ci_v1'),
        ),
        migrations.AddField(
            model_name='follow',
            name='followee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='follow',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='movie',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.movie'),
        ),
        migrations.AddField(
            model_name='event',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='embedding',
            index=models.Index(fields=['object_type', 'object_id', 'model_version'], name='api_embeddi_object__7e2580_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='embedding',
            unique_together={('object_type', 'object_id', 'model_version')},
        ),
        migrations.AddField(
            model_name='cast',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cast', to='api.movie'),
        ),
        migrations.AddField(
            model_name='cast',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='api.person'),
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['movie', 'rating'], name='api_rating_movie_i_5d758a_idx'),
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['user'], name='api_rating_user_id_1b0478_idx'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(check=models.Q(('rating__gte', 0.0), ('rating__lte', 5.0)), name='rating_range'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together={('user', 'movie')},
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['release_year'], name='api_movie_release_2ebffa_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-avg_rating', '-rating_count'], name='api_movie_avg_rat_c14902_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-popularity'], name='api_movie_popular_f28102_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['title'], name='api_movie_title_f63d7e_idx'),
        ),
        migrations.AddConstraint(
            model_name='movie',
            constraint=models.UniqueConstraint(condition=models.Q(('tmdb_id__isnull', True)), fields=('title', 'release_year'), name='uniq_title_year'),
        ),
        migrations.AlterUniqueTogether(
            name='listitem',
            unique_together={('list', 'movie')},
        ),
        migrations.AlterUniqueTogether(
            name='list',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'followee')},
        ),
        migrations.AddConstraint(
            model_name='cast',
            constraint=models.UniqueConstraint(fields=('movie', 'person', 'role_type', 'job', 'character'), name='uniq_credit_per_character'),
        ),
        migrations.AlterUniqueTogether(
            name='cast',
            unique_together={('movie', 'person', 'role_type', 'job')},
        ),
    ]
